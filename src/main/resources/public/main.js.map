{"version":3,"sources":["./src/app/job-details.service.ts","./src/app/job-details-list/job-details-list.component.ts","./src/app/job-details-list/job-details-list.component.html","./src/app/search-filter/search-filter.component.ts","./src/app/search-filter/search-filter.component.html","./src/environments/environment.ts","./src/app/company-job/company-job.component.ts","./src/app/company-job/company-job.component.html","./src/app/company-job-list/company-job-list.component.ts","./src/app/company-job-list/company-job-list.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/company-job-list.service.ts","./src/app/constants.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { JobDetails } from './job-details';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CompanyJob } from './company-job';\nimport { Constants } from './constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobDetailsService {\n\n  url :string  = Constants.rootUrl + \"/companyjob\";\n\n  constructor(private http: HttpClient) {} \n\n  fetchJobDetails(jdmJobDescHistoryID: string): Promise<JobDetails> { \n    return this.http.get<JobDetails>(this.url + \"?jdmJobDescHistoryID=\" + jdmJobDescHistoryID).toPromise();\n  }\n \n \n}\n","import { JobDetails } from './../job-details';\nimport { Component, Input, OnInit, AfterViewInit, OnChanges, SimpleChanges, AfterContentChecked } from '@angular/core';\nimport { JobDetailsService } from '../job-details.service';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'app-job-details-list',\n  templateUrl: './job-details-list.component.html',\n  styleUrls: ['./job-details-list.component.css']\n})\nexport class JobDetailsListComponent implements OnInit, AfterViewInit, OnChanges {\n\n  @Input() selectedDetailIDs: string[];\n  jobDetailsList: JobDetails[] = [];\n  dataSource: MatTableDataSource<JobDetails> = new MatTableDataSource(this.jobDetailsList);\n  displayedColumns: string[] = ['JobCode'];\n\n  panelOpenState = false;\n\n  constructor() { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    //console.log(\"JobDetailsListComponent -> ngOnChanges! \" + this.jobDetailsList.length);\n    this.dataSource = new MatTableDataSource(this.jobDetailsList);\n}\n\n  ngAfterViewInit(): void {\n  }\n\n  ngOnInit(): void {\n  }\n\n\n\n\n\n\n}\n","<div id=\"jobDetailsDiv\" >\n\n    <table class=\"tblSelectedJobDetails\" *ngFor=\"let jobId of selectedDetailIDs\">\n      <tr>\n        <td>\n          <app-company-job [jdmJobDescHistoryID]=jobId></app-company-job>\n        </td>\n      </tr>\n    </table>\n\n</div>","import { Component, EventEmitter, Input, OnInit, Output, OnChanges, SimpleChanges, ViewChildren, ViewChild, AfterViewInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { CompanyJob } from '../company-job';\nimport { MatChip, MatChipList } from '@angular/material/chips';\n\n@Component({\n  selector: 'app-search-filter',\n  templateUrl: './search-filter.component.html',\n  styleUrls: ['./search-filter.component.css']\n})\nexport class SearchFilterComponent implements OnInit, AfterViewInit, OnChanges {\n\n  @ViewChild('matChipList') matChipList: MatChipList;\n\n  @Input() companyJobs!: CompanyJob[];\n  @Input() displayedColumns: string[];\n  @Input() jobFamilies: string[];\n\n  searchFilterOptionMap: Map<string, string> = new Map<string, string>([\n    [\"Select...\", \"\"],\n    [\"Job Code\", \"CompanyJobCode\"],\n    [\"Job Title\", \"CompanyJobTitle\"],\n    [\"Job Family\", \"UDF_Job_Family\"],\n    [\"Pay Grade\", \"UDF_Pay_Grade\"],\n    [\"FLSA Classification\", \"UDF_FLSA_Classification\"],\n    [\"Large Functional Group\", \"UDF_Large_Functional_Group\"]\n  ]);\n\n  searchFilterOptions: string[] = [];\n\n  @Output() filterChanged: EventEmitter<CompanyJob[]> =   new EventEmitter();\n  filteredJobs!: CompanyJob[];\n\n  selectedFilter = \"\"\n  searchForm = this.formBuilder.group({\n    searchText: [''],\n    searchFilter: ['']\n  })\n  \n  constructor(private formBuilder: FormBuilder) { \n    var keys = this.searchFilterOptionMap.keys();\n    for (var key of keys) {\n      this.searchFilterOptions.push(key);\n    }\n  }\n  ngAfterViewInit(): void {}\n\n  ngOnChanges(changes: SimpleChanges): void {}\n\n  ngOnInit(): void {\n    this.filteredJobs = [...this.companyJobs]\n    this.filterChanged.emit(this.filteredJobs);\n  }\n\n  clickClear() {\n    this.filteredJobs = []\n    this.searchForm.reset();\n    this.filterChanged.emit(this.companyJobs);\n    var chips = this.matChipList.chips;\n    for (var chip of chips) {\n      chip.selected = false;\n    }\n  }\n\n  clickSearch() {\n    console.log(\"hey! \" + JSON.stringify(this.searchForm.value['searchText']));\n    var searchText: string = this.searchForm.value['searchText'];\n    var searchFilter: string = this.searchFilterOptionMap.get(this.searchForm.value['searchFilter']);\n    console.log(\"searchText: \" + searchText + \" || searchFilter: \" + searchFilter);\n    var chips = this.matChipList.chips;\n    for (var chip of chips) {\n      chip.selected = false;\n    }\n\n    this.filteredJobs = []\n    for (var job of this.companyJobs) {\n      if (searchText.length > 0) {\n        if (searchFilter && searchFilter.length > 0) {// filter has been selected...\n          var checkField: string = String(job[searchFilter]);\n          if (checkField.toUpperCase().includes(searchText.toUpperCase())) {\n            this.filteredJobs.push(job)\n          }\n        }\n        else {// no filter, check every field ...\n          console.log(\"NO FILTER\");\n          for (var column of this.displayedColumns) {\n            if (column != 'select'){\n              var col = String(job[column]);\n              if ((job[column]) && (col.toUpperCase().includes(searchText.toUpperCase()))) {\n                if (!this.filteredJobs.includes(job)) {\n                  this.filteredJobs.push(job)\n                }\n              }\n            }\n          }          \n        }\n    \n      } else {\n        //no search text, do nothing\n      }\n    }\n    this.filteredJobs = [...this.filteredJobs]; //alerts the angular change detection mechanism\n    this.filterChanged.emit(this.filteredJobs);\n  }\n\n  toggleSelection(chip: MatChip) {\n    console.log(\"chip.selected? \" + chip.selected);\n    this.clickClear();\n    chip.toggleSelected();\n\n    if (chip.selected) {\n      console.log(\"chip.selected\");\n      var temp: CompanyJob[] = [];\n      var filterArray: CompanyJob[] = [];\n      if (this.filteredJobs.length > 0){\n        filterArray = [...this.filteredJobs];\n      } else {\n        filterArray = [...this.companyJobs];\n      }\n      for (var job of filterArray) {\n        if (job.UDF_Job_Family === chip.value) {\n          temp.push(job)\n        }\n      }\n      this.filteredJobs = [...temp];\n    } else {\n      console.log(\"NOT chip.selected\");\n      this.filteredJobs = [...this.companyJobs];\n    }\n    this.filterChanged.emit(this.filteredJobs);\n\n }\n\n\n\n\n}\n","<form id='searchform' [formGroup]=\"searchForm\" class=\"example-form\">\n\n  <div id=\"divSearchFilters\" class='mat-elevation-z6'>\n\n    <p>Filter by Search Field</p>\n    \n    <div id='divJobSearch' class='mat-elevation-z6'>\n      <div id='filterOpts' class='formfield' >\n        <mat-form-field>\n          <mat-label>Filter on...</mat-label>\n          <select formControlName=\"searchFilter\" matNativeControl>\n            <!--<option value=\"\">&nbsp;</option>-->\n            <option value=\"{{column}}\" *ngFor=\"let column of searchFilterOptions\">{{column}}</option>\n          </select>\n        </mat-form-field>\n        <i class=\"fa fa-filter filterFunnel\" aria-hidden=\"true\"></i>\n      </div>\n    \n     \n\n      <div id='filterTxt' class='formfield' >\n        <mat-form-field>\n          <mat-label>Search Text</mat-label>\n          <input formControlName=\"searchText\" matInput placeholder=\"Some text\" value=\"\">\n        </mat-form-field>\n        <i class=\"fa fa-search fa-1 searchGlass\" aria-hidden=\"true\" (click)='clickSearch()'></i>\n    \n        <button class='hidden' mat-raised-button (click)='clickSearch()'>Submit</button>\n        <!--<button mat-raised-button (click)='clickClear()'>Clear</button>-->\n      </div>\n    \n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div id='clearfilters'>\n      Results: {{filteredJobs.length}}<button id=\"clearSearch\" (click)='clickClear()'>Clear Filters</button>\n    </div>      \n\n    <mat-divider></mat-divider>\n\n    <p>Filter by Job Family</p>\n    <div id=\"divFilterButtons\">\n\n      <mat-chip-list #matChipList='matChipList' selectable>\n        <mat-chip #c=\"matChip\" (click)=\"toggleSelection(c)\" *ngFor=\"let fam of jobFamilies;\">{{fam}}</mat-chip>\n      </mat-chip-list>\n    </div>\n\n\n  </div>\n</form>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { AfterViewInit, Component, Input, OnInit } from '@angular/core';\nimport { JobDetails } from '../job-details';\nimport { JobDetailsService } from '../job-details.service';\n\n@Component({\n  selector: 'app-company-job',\n  templateUrl: './company-job.component.html',\n  styleUrls: ['./company-job.component.css']\n})\nexport class CompanyJobComponent implements OnInit, AfterViewInit {\n\n  expanded: boolean = false;\n  expandedElement: JobDetails | null;\n\n  @Input() jdmJobDescHistoryID: string;\n  jobDetails: JobDetails;\n  //keys: string[] = [];\n  fieldsToShow: string[] = [\n    \"CompanyJobCode\", \n    \"CompanyJobTitle\",\n    \"CompanyJobSummary\", \n    \"UDF_FLSA_Classification\", \n    \"UDF_Pay_Grade\", \n    \"UDF_Large_Functional_Group\", \n    \"UDF_Job_Family\", \n    \"UDF_Minimum_Education_Requirement\", \n    \"UDF_Minimum_Experience_Requirement\", \n    \"UDF_Position_Designation\", \n    \"UDF_Locations_applicable_to_Safety_Sensitive_for_this_position\", \n    \"UDF_Essential_Duties_and_Responsibilities\", \n    \"UDF_Education_Detail\", \n    \"UDF_Experience_Detail\", \n    \"UDF_Qualifications_and_Competencies\", \n    \"UDF_Nature_of_Work\", \n    \"UDF_Physical_Requirements\"\n  ];\n\n  constructor(private jobDetailsService: JobDetailsService) { }\n\n  ngAfterViewInit(): void {\n  }\n\n  ngOnInit(): void {\n    this.fetchJobDetails(this.jdmJobDescHistoryID);\n  }\n\n  public fetchJobDetails(jdmJobDescHistoryID: string) {\n    console.log(\"CompanyJobComponent fetchJobDetails! \" + jdmJobDescHistoryID)\n    this.jobDetailsService.fetchJobDetails(jdmJobDescHistoryID)\n      .then(res => {\n        console.log(\"fetched result: \" + (res));\n        var details: JobDetails = res as JobDetails;\n        console.log(\"DETAILS: [\" + details.JDMJobDescHistoryID + \"]\");\n        this.jobDetails = details;\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  toggleIcon(){\n    console.log('toggle!');\n    this.expanded = !this.expanded;\n  }\n\n}\n","<div class=\"jobdetailscard mat-table cdk-table mat-elevation-z8 ng-tns-c138-0\">\n\n  <div>\n    <table id=\"tblJobDetails\" *ngIf=\"jobDetails != null; else fetching\">\n      <tr class=\"jobDetailsRow\" *ngFor=\"let key of fieldsToShow;\">\n        <th class=\"jobDetailsHeader\">{{key.split(\"_\").join(\" \").replace(\"UDF\", \"\")}}</th>\n        <td class=\"jobDetailsCell\">{{jobDetails[key].replace(\"null\", \" \")}}</td>\n      </tr>\n    </table>\n  \n    <ng-template #fetching>\n      <mat-panel-title>\n        fetching...\n      </mat-panel-title>\n    </ng-template>\n  \n  </div>\n\n\n</div>","import { JobDetailsService } from './../job-details.service';\nimport { Component, OnInit, ViewChild, Input, OnChanges, SimpleChanges, AfterViewInit } from '@angular/core';\nimport { CompanyJob } from '../company-job';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { JobDetails } from '../job-details';\n\n\n@Component({\n  selector: 'app-company-job-list',\n  templateUrl: './company-job-list.component.html',\n  styleUrls: ['./company-job-list.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\n\nexport class CompanyJobListComponent implements AfterViewInit, OnChanges {\n\n  @Input() companyJobs!: CompanyJob[];\n  @Input() jobFamilies!: string[];\n  filteredJobs: CompanyJob[];\n  selectedDetailIDs: string[] = [];\n\n  dataSource: MatTableDataSource<CompanyJob> = new MatTableDataSource(this.companyJobs);\n  selection: SelectionModel<CompanyJob> = new SelectionModel<CompanyJob>(true, []);\n  //displayedColumns: string[] = ['select', 'JDMJobDescHistoryID', 'CompanyJobCode', 'CompanyJobTitle', 'JobFamily', 'JobFLSAStatusDesc'];\n  displayedColumns: string[] = ['CompanyJobCode', 'CompanyJobTitle', 'UDF_Large_Functional_Group', 'UDF_Job_Family', 'UDF_Pay_Grade', 'UDF_FLSA_Classification', 'LastUpdateDate'];\n  //displayedColumns: string[] = ['select', 'CompanyJobCode', 'CompanyJobTitle', 'UDF_Large_Functional_Group', 'UDF_Job_Family'];\n\n  expandedElement: JobDetails | null;\n  selectedJDMJobDescHistoryID: string | null;\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(private jobDetailsService: JobDetailsService) { }\n\n  onChangeEventFunc(row, evt: MatCheckboxChange) {\n    var checked = evt.checked;\n    var jobId = row.JDMJobDescHistoryID;\n    if (checked === true) {\n      if (this.selectedDetailIDs.indexOf(jobId) < 0) {\n        this.selectedDetailIDs.push(jobId);\n      } else {\n        //jobid already in list\n      }\n    } else {\n      var temp: string[] = [];\n      for (var id of this.selectedDetailIDs) {\n        if (id !== jobId) {// add all jobIds to temp array except the one being unselected\n          temp.push(id);\n        } else {\n          //dont add jobid being unselected\n        }\n      }\n      this.selectedDetailIDs = [...temp];\n    }\n  }\n\n  public filterHandler(filtered: CompanyJob[]) {\n    //console.log(\"filterHandler: \" + (filtered));\n    this.filteredJobs = [...filtered];\n    if (filtered.length === 0) {\n      this.clearSelections();\n    }\n    //this.updateJobList(this.filteredJobs);\n    this.companyJobs = [...this.companyJobs];\n    if (this.filteredJobs.length > 0){\n      this.dataSource = new MatTableDataSource(this.filteredJobs);\n    } else {\n      this.dataSource = new MatTableDataSource(this.companyJobs);\n    }\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n  }\n\n  onNgModelChange(e) {\n    console.log(\"DEEEEBUG ####### onNgModelChange()...\" + String(e));\n    this.updateJobList();\n    return true;\n  }\n\n  clearSelections() {\n    this.selectedDetailIDs = [];\n    this.selection.clear();\n    this.dataSource.data.forEach(row => this.selection.deselect(row));\n  }\n\n\n  updateJobList() {\n    console.log(\"##### debug companyjoblist.updateJobList\");\n    this.selectedDetailIDs = [];\n    console.log(\"selected: \" + this.selection.selected.length);\n    for (var idx of this.selection.selected.keys()) {\n      var obj = this.selection.selected[idx];\n      var job = obj as CompanyJob;\n      var jobId = job.JDMJobDescHistoryID;\n      console.log(\"key: \" + String(idx) + \"   value: \" + job.JDMJobDescHistoryID);\n      this.selectedDetailIDs.push(jobId);\n    }\n    this.dataSource  = new MatTableDataSource(this.companyJobs);\n    this.dataSource.sort = this.sort;\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    console.log(\"##### debug companyjoblist.ngOnChanges\");\n    this.updateJobList();\n    setTimeout(() => this.dataSource.paginator = this.paginator);\n  }\n\n\n  ngAfterViewInit() {\n    this.updateJobList();\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. \n   * https://material.angular.io/components/table/overview#selection\n  */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected == numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  public fetchJobDetails(jdmJobDescHistoryID: string) {\n    console.log(\"CompanyJobComponent fetchJobDetails! \" + jdmJobDescHistoryID)\n    this.selectedJDMJobDescHistoryID = jdmJobDescHistoryID;\n  }\n\n}\n","<table id='container-tbl'>\n  <tr>\n    <td id='container-left'>\n      <app-search-filter [companyJobs]=companyJobs [jobFamilies]=jobFamilies [displayedColumns]=displayedColumns\n        (filterChanged)=\"filterHandler($event)\">\n      </app-search-filter>\n    </td>\n\n    <td id='container-right'>\n      <div id='divJobListExpandable' class=\"mat-elevation-z6\">\n\n        <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\" multiTemplateDataRows>\n\n          <ng-container matColumnDef=\"CompanyJobCode\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Job Code </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.CompanyJobCode}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"CompanyJobTitle\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Job Title </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.CompanyJobTitle}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"UDF_Large_Functional_Group\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Large functional Group </th>\n            <td mat-cell *matCellDef=\"let element\">{{element.UDF_Large_Functional_Group.replace('null', ' ')}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"UDF_Job_Family\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header > Job Family </th>\n            <td mat-cell *matCellDef=\"let element\">{{element.UDF_Job_Family.replace('null', ' ')}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"UDF_Pay_Grade\">\n            <th mat-header-cell *matHeaderCellDef> Pay Grade </th>\n            <td mat-cell *matCellDef=\"let element\">{{element.UDF_Pay_Grade.replace('null', ' ')}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"UDF_FLSA_Classification\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>FLSA Classification </th>\n            <td mat-cell *matCellDef=\"let element\">{{element.UDF_FLSA_Classification.replace('null', ' ')}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"LastUpdateDate\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Update On...</th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.LastUpdateDate}} </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"expandedDetail\">\n            <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"displayedColumns.length\">\n              <div class=\"example-element-detail\"\n                [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n                <div class=\"example-element-description\"\n                  *ngIf=\"selectedJDMJobDescHistoryID!=null&&selectedJDMJobDescHistoryID==element.JDMJobDescHistoryID\">\n                  <app-company-job [jdmJobDescHistoryID]=selectedJDMJobDescHistoryID></app-company-job>\n                </div>\n              </div>\n            </td>\n          </ng-container>\n\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n\n          <tr mat-row *matRowDef=\"let element; columns: displayedColumns;\" class=\"example-element-row\"\n            [class.example-expanded-row]=\"expandedElement === element\"\n            (click)=\"expandedElement = expandedElement === element ? null : element; fetchJobDetails(element.JDMJobDescHistoryID)\">\n          </tr>\n\n          <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\n\n        </table>\n\n        <mat-paginator [pageSizeOptions]=\"[12, 30, 60]\" showFirstLastButtons>\n        </mat-paginator>\n\n      </div>\n    </td>\n  </tr>\n</table>","import { AfterViewInit, SimpleChanges } from '@angular/core';\nimport { OnChanges } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { CompanyJob } from './company-job';\nimport { CompanyJobListService } from './company-job-list.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, AfterViewInit{\n\n  title = 'companalyst-ng';\n  companyJobs: CompanyJob[] = [];\n  jobFamilies: string[] = [];\n\n  constructor(private jobListService: CompanyJobListService, private titleService: Title) { }\n\n  public setTitle(newTitle: string) {\n    this.titleService.setTitle(\"NRAO Career Portal\");\n  }\n\n  ngOnInit(): void {\n    this.fetchCompanyJobList();\n  }\n\n  ngAfterViewInit(): void {\n    this.companyJobs = [...this.companyJobs];\n  }\n\n  public fetchCompanyJobList() {\n    this.jobListService.fetchCompanyJobList()\n      .then(res => {\n        console.log(\"fetched result: \" + (res ));\n        //this.companyJobs = res as CompanyJob[];\n        this.companyJobs = [];\n        var jobs = res as CompanyJob[];\n        for (let job of jobs){\n          var jobFam = job.UDF_Job_Family;\n          if (!this.jobFamilies.includes(jobFam) && jobFam != null && jobFam != 'null'  && jobFam != ''){\n            this.jobFamilies.push(jobFam);\n          }\n          if (job.UDF_Organization.indexOf(\"NRAO\") > -1){\n            this.companyJobs.push(job);\n          } else {\n            console.log(\"job.UDF_Organization: \" + job.UDF_Organization);\n          }\n        }\n        this.companyJobs = [...this.companyJobs];\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n  \n}\n","<div id='header-div'>\n    <div id='logo-div'><img src='/assets/images/logoNRAO.png'></div>\n    <div id='title-div'><h1 id='site-name'>Careers at NRAO</h1></div>\n</div>\n\n<mat-divider></mat-divider>\n\n<app-company-job-list [companyJobs]=companyJobs [jobFamilies]=jobFamilies></app-company-job-list> \n\n\n\n\n","import { MatPaginator } from '@angular/material/paginator';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { CompanyJobListComponent } from './company-job-list/company-job-list.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\n\nimport {MatInputModule} from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport { CompanyJobComponent } from './company-job/company-job.component';\n\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatCardModule} from '@angular/material/card';\nimport { SearchFilterComponent } from './search-filter/search-filter.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { JobDetailsListComponent } from './job-details-list/job-details-list.component';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatDividerModule} from '@angular/material/divider';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CompanyJobListComponent,\n    CompanyJobComponent,\n    SearchFilterComponent,\n    JobDetailsListComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n    MatMenuModule,\n    MatTabsModule,\n    MatChipsModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    MatDividerModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Constants } from './constants';\nimport { CompanyJob } from './company-job';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompanyJobListService {\n\n  url :string  = Constants.rootUrl + \"companyjoblist\";\n\n  constructor(private http: HttpClient) {} \n\n  fetchCompanyJobList(): Promise<CompanyJob[]> { \n    return this.http.get<CompanyJob[]>(this.url).toPromise();\n  }\n \n \n\n}","export class Constants {\n\n    //public static rootUrl: string = \"http://localhost:10001/\";\n    public static rootUrl: string = \"\";\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}